<div class="container mx-auto my-8">
    <h1 class="text-3xl font-bold mb-4 text-center">Dashboard</h1>

    <!-- Form for creating new cards in 'to-do' column -->
    <div class="new-card">
        <h2 class="text-2xl font-bold mb-4">
            Create New Card:
        </h2>
    <form class="create-card-form" data-column="to-do">
        <input type="text" name="title" placeholder="Title" class="w-full p-2 mb-2 border rounded title" required>
        <textarea name="description" placeholder="Description" class="w-full p-2 mb-2 border rounded description"
            required></textarea>
        <input type="hidden" name="column" value="to-do">
        <button type="submit" class="py-3 px-4 w-32 inline-flex justify-center items-center gap-2 rounded-md bg-blue-400 border border-transparent font-semibold text-blue-200 hover:text-white hover:bg-blue-500 focus:outline-none focus:ring-2 ring-offset-white focus:ring-blue-500 focus:ring-offset-2 transition-all text-sm">Create Card</button>
    </form>
    </div>


    <div class="info">
        <div class="w-1/3 border-blue-400 border-2">
            <div class="column text-center" id="to-do" ondrop="drop(event, 'to-do')" ondragover="allowDrop(event)">
                <h2 class="text-xl font-semibold">To-Do</h2>
                {{#each cards}}
                {{#if (eq column "to-do")}}
                <div class="card" id="{{id}}" draggable="true" ondragstart="drag(event)">
                    <h3 class="text-lg font-semibold">{{title}}</h3>
                    <p>{{description}}</p>
                </div>
                {{/if}}
                {{/each}}
            </div>
        </div>

        <div class="w-1/3 border-blue-400 border-2">
            <div class="column text-center" id="in-work" ondrop="drop(event, 'in-work')" ondragover="allowDrop(event)">
                <h2 class="text-xl font-semibold">In-Work</h2>
                {{#each cards}}
                {{#if (eq status "in-work")}}
                <div class="card" id="{{id}}" draggable="true" ondragstart="drag(event)">
                    <h3 class="text-lg font-semibold">{{title}}</h3>
                    <p>{{description}}</p>
                </div>
                {{/if}}
                {{/each}}
            </div>
        </div>

        <div class="w-1/3 border-blue-400 border-2">
            <div class="column text-center" id="completed" ondrop="drop(event, 'completed')" ondragover="allowDrop(event)">
                <h2 class="text-xl font-semibold">Completed</h2>
                {{#each cards}}
                {{#if (eq status "completed")}}
                <div class="card" id="{{id}}" draggable="true" ondragstart="drag(event)">
                    <h3 class="text-lg font-semibold">{{title}}</h3>
                    <p>{{description}}</p>
                </div>
                {{/if}}
                {{/each}}
            </div>
        </div>
    </div>
</div>

<script>
    function allowDrop(event) {
        console.log('allowDrop');
        event.preventDefault();
    }

    function drag(event) {
        console.log('drag');
        event.dataTransfer.setData('text/plain', event.target.id);
    }

    function drop(event, column) {
        console.log('drop');
        event.preventDefault();
        const cardId = event.dataTransfer.getData('text/plain');
        const cardElement = document.getElementById(cardId);
        const cardColumn = cardElement.parentNode.id;

        console.log('Dropping card:', cardId, 'from column:', cardColumn, 'to column:', column);

        if (cardColumn !== column) {
            // Update the card's column on the server
            fetch(`/dashboard/move-card/${cardId}/${column}`, { method: 'POST' })
                .then(response => {
                    console.log(response);
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status} - ${response.statusText}`);
                    }
                    return response.statusText;
                })
                .then(createdCard => {
                    console.log('Card created successfully:', createdCard);
                    // Move the card to the new column
                    document.getElementById(column).appendChild(cardElement);
                })
                .catch(error => {
                    console.error('Error creating/moving card:', error);
                    return error.text(); // Add this line to log the response text
                })
                .then(responseText => {
                    console.log('Server response text:', responseText);
                });

        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.create-card-form').forEach(form => {
            form.addEventListener('submit', async (event) => {
                event.preventDefault();
                const data = {
                    title: form.querySelector('.title').value,
                    description: form.querySelector('.description').value,
                    status: 'to-do'
                };
                console.log('data', data)
                const column = form.getAttribute('data-column');

                try {
                    // Submit the form data to create a new card
                    const response = await fetch('/dashboard/create-card', {
                        method: 'POST',
                        body: JSON.stringify(data),
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        // Card created successfully, update the UI
                        const newCardData = await response.json();
                        const newCardElement = document.createElement('div');
                        newCardElement.classList.add('card');
                        newCardElement.id = newCardData.id;
                        newCardElement.draggable = true;
                        newCardElement.ondragstart = drag;
                        newCardElement.innerHTML = `
                        <h3 class="text-lg font-semibold">${newCardData.title}</h3>
                        <p>${newCardData.description}</p>
                    `;

                        // Append the new card to the appropriate column
                        document.getElementById(column).appendChild(newCardElement);

                        // Clear the form
                        form.reset();
                    } else {
                        console.error('Error creating card:', response.statusText);
                    }
                } catch (error) {
                    console.error('Error creating card:', error);
                }
            });
        });
    });
</script>